name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ] 

env:
  AWS_REGION: eu-west-3                  # Assurez-vous que cette région est correcte pour votre AWS
  ECR_REPOSITORY: mlops                   # Nom de votre repository Amazon ECR
  ECS_SERVICE: Mlops_service               # Nom de votre service Amazon ECS
  ECS_CLUSTER: MlopsClusterProjet          # Nom de votre cluster Amazon ECS
  ECS_TASK_DEFINITION: mlops_tache        # Fichier task definition Amazon ECS (ajustez-le)
  CONTAINER_NAME: conteneur_mlops           # Nom du conteneur dans la définition de la tâche

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Configuration des identifiants AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}   # Utilise les clés stockées dans GitHub Secrets
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Utilise les clés stockées dans GitHub Secrets
        aws-region: eu-west-3

    # Se connecter à Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Construire, taguer, et pousser l'image Docker sur Amazon ECR
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # Télécharger la définition de la tâche ECS actuelle
    - name: Download task definition
      run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json
          
    # Mettre à jour l'image Docker dans la définition de la tâche ECS
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    # Déployer la nouvelle définition de tâche sur Amazon ECS
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
